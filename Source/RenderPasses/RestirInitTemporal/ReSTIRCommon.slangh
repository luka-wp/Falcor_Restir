#pragma once
#include "Utils/Math/MathConstants.slangh"

import Scene.Raytracing;
import Scene.Intersection;
import Utils.Math.MathHelpers;
import Utils.Geometry.GeometryHelpers;
import Utils.Sampling.SampleGenerator;
import Rendering.Lights.LightHelpers;
import Utils.Color.ColorHelpers;

/* ================ *
 * ==== Common ==== *
 * ==== Begin ===== *
 * ================ */

struct Reservoir
{
    float3 visiblePoint;
    float3 visibleNormal;

    float3 samplePoint;
    float3 sampleNormal;
    float3 sampleRadiance;

    float weightSum;
    uint M;
    uint age;

    static Reservoir makeReservoir(
        float3 inVisiblePoint,
        float3 inVisibleNormal,
        float3 inSamplePoint,
        float3 inSampleNormal,
        float3 inSampleRadiance,
        float inSamplePdf
    )
    {
        Reservoir reservoir;
        reservoir.visiblePoint = inVisiblePoint;
        reservoir.visibleNormal = inVisibleNormal;
        reservoir.samplePoint = inSamplePoint;
        reservoir.sampleNormal = inSampleNormal;
        reservoir.sampleRadiance = inSampleRadiance;
        reservoir.weightSum = inSamplePdf > 0.f ? 1.f / inSamplePdf : 0.f;
        reservoir.M = 1;
        reservoir.age = 0;
        return reservoir;
    }

    static Reservoir makeEmpty()
    {
        Reservoir reservoir;
        reservoir.visiblePoint = float3(0.f);
        reservoir.visibleNormal = float3(0.f);
        reservoir.samplePoint = float3(0.f);
        reservoir.sampleNormal = float3(0.f);
        reservoir.sampleRadiance = float3(0.f);
        reservoir.weightSum = 0.f;
        reservoir.M = 0;
        reservoir.age = 0;
        return reservoir;
    }

    bool isValid() { return M != 0; }

    [mutating]
    bool merge(Reservoir reservoir, float targetPdf, float random)
    {
        float risWeight = targetPdf * reservoir.weightSum * reservoir.M;
        M += reservoir.M;
        weightSum += risWeight;
        bool selectSample = (random * weightSum <= risWeight);
        if (selectSample)
        {
            samplePoint = reservoir.samplePoint;
            sampleNormal = reservoir.sampleNormal;
            sampleRadiance = reservoir.sampleRadiance;
            age = reservoir.age;
        }

        return selectSample;
    }

    [mutating]
    void finalize(float numerator, float denominator) { weightSum = (denominator == 0.f) ? 0.f : (weightSum * numerator) / denominator; }
};

Texture2D<PackedHitInfo> gVBuffer;
Texture2D<float4> gViewW;

#define is_valid(name) (is_valid_##name != 0)

float3 getPrimaryRayDir(uint2 launchIndex, uint2 launchDim)
{
    if (is_valid(gViewW))
    {
        return -gViewW[launchIndex].xyz;
    }
    return gScene.camera.computeRayPinhole(launchIndex, launchDim).dir;
}

void getShadingDataAndMaterial(out ShadingData shadingData, out IMaterialInstance materialInstance, uint2 pixel, uint2 frameDim)
{
    float3 rayDir = getPrimaryRayDir(pixel, frameDim);
    let lod = ExplicitLodTextureSampler(0.f);
    { // Inlined loadShadingData
        const HitInfo hit = HitInfo(gVBuffer[pixel]);
        VertexData v = {};
        uint materialID = {};
        if (hit.getType() == HitType::Triangle)
        {
            const TriangleHit triangleHit = hit.getTriangleHit();
            v = gScene.getVertexData(triangleHit);
            materialID = gScene.getMaterialID(triangleHit.instanceID);
        }

        shadingData = gScene.materials.prepareShadingData(v, materialID, -rayDir, lod);
    }

    { // Material instance
        materialInstance = gScene.materials.getMaterialInstance(shadingData, lod);
    }
}

uint getPixelIndex(uint2 pixel, uint2 frame)
{
    return pixel.x + pixel.y * frame.x;
}

float getTargetPdfForSurface(ShadingData shadingData, IMaterialInstance materialInstance, float3 samplePosition, float3 sampleRadiance)
{
    float3 L = normalize(samplePosition - shadingData.posW);
    float NdotL = saturate(dot(L, shadingData.faceN));
    BSDFProperties bsdf = materialInstance.getProperties(shadingData);
    // float3 reflectedRadiance = sampleRadiance * bsdf.diffuseReflectionAlbedo * NdotL;
    float3 reflectedRadiance = sampleRadiance * (bsdf.diffuseReflectionAlbedo + bsdf.specularReflectionAlbedo);
    return luminance(reflectedRadiance);
    // return luminance(sampleRadiance);
}

void calculatePartialJacobian(
    const float3 reciverPos,
    const float3 samplePos,
    const float3 sampleNormal,
    out float distanceToSurface,
    out float cosineEmissionAngle
)
{
    float3 vec = reciverPos - samplePos;
    distanceToSurface = length(vec);
    cosineEmissionAngle = saturate(dot(sampleNormal, vec / distanceToSurface));
}

float calculateJacobian(float3 reciverPos, float3 neighborReciverPos, Reservoir neighborReservoir)
{
    float originalDistance, originalCosine;
    float newDistance, newCosine;
    calculatePartialJacobian(reciverPos, neighborReservoir.samplePoint, neighborReservoir.sampleNormal, newDistance, newCosine);
    calculatePartialJacobian(
        neighborReciverPos, neighborReservoir.samplePoint, neighborReservoir.sampleNormal, originalDistance, originalCosine
    );

    float denom = (originalCosine * newDistance * newDistance);
    float jacobian = denom != 0.f ? (newCosine * originalDistance * originalDistance) / denom : 0.f;

    if (isinf(jacobian) || isnan(jacobian))
    {
        jacobian = 0.f;
    }
    return jacobian;
}

bool validateSampleWithJacobian(inout float jacobian)
{
    if (jacobian > 10.f || jacobian < 0.1f)
    {
        return false;
    }

    jacobian = clamp(jacobian, 1.f / 3.f, 1.f);
    return true;
}

bool validateGeometricSimilarity(float3 positionA, float3 normalA, float3 positionB, float3 normalB, float4x4 viewProj)
{
    const float NdotN = dot(normalA, normalB);
    if (NdotN < 0.f)
    {
        return false;
    }
    const float phi = acos(NdotN);
    if (phi > (25.f / 180.f * M_PI))
    {
        return false;
    }
    float4 a = mul(viewProj, float4(positionA, 1.f));
    float4 b = mul(viewProj, float4(positionB, 1.f));
    a.xyz /= a.w;
    b.xyz /= b.w;
    if (abs(a.z - b.z) > 0.05f)
    {
        return false;
    }

    return true;
}

/* ================ *
 * ==== Common ==== *
 * ==== End ===== *
 * ================ */